
    create sequence dataset_copies_seq start with 1 increment by 50;

    create sequence dataset_share_history_seq start with 1 increment by 50;

    create sequence dataset_shares_seq start with 1 increment by 50;

    create sequence datasets_seq start with 1 increment by 50;

    create table algorithm_configurations (
        algorithm_id integer,
        id integer generated by default as identity,
        user_id uuid not null,
        options varchar(255),
        primary key (id)
    );

    create table algorithm_parameters (
        algorithm_id integer,
        configuration_id integer,
        id integer generated by default as identity,
        description varchar(200),
        name varchar(255) not null,
        range varchar(255),
        type varchar(255) not null,
        value varchar(255),
        primary key (id)
    );

    create table algorithms (
        id integer generated by default as identity,
        default_options varchar(5000),
        description varchar(5000),
        options varchar(5000),
        options_description varchar(5000),
        class_name varchar(255),
        name varchar(255),
        primary key (id),
        unique (name)
    );

    create table async_task_status (
        finished_at timestamp(6) with time zone,
        started_at timestamp(6) with time zone,
        error_message varchar(255),
        result_url varchar(255),
        status varchar(255) check (status in ('PENDING','RUNNING','COMPLETED','FAILED')),
        task_id varchar(255) not null,
        task_type varchar(255) check (task_type in ('TRAINING','PREDICTION')),
        username varchar(255),
        primary key (task_id)
    );

    create table categories (
        deleted boolean not null,
        id integer generated by default as identity,
        created_by uuid not null,
        description varchar(2000),
        name varchar(255) not null unique,
        primary key (id)
    );

    create table category_hierarchy (
        child_category_id integer not null,
        parent_category_id integer not null,
        primary key (child_category_id, parent_category_id)
    );

    create table category_history (
        category_id integer not null,
        id integer generated by default as identity,
        initial boolean,
        edited_at timestamp(6) not null,
        edited_by uuid not null,
        comments varchar(100),
        new_values varchar(5000),
        old_values varchar(5000),
        primary key (id)
    );

    create table category_request_parents (
        category_request_id integer not null,
        parent_category_id integer not null,
        primary key (category_request_id, parent_category_id)
    );

    create table category_requests (
        approved_category_id integer,
        id integer generated by default as identity,
        status_id integer not null,
        processed_at timestamp(6),
        requested_at timestamp(6) not null,
        processed_by uuid,
        requested_by uuid not null,
        description varchar(5000),
        rejection_reason varchar(5000),
        name varchar(255) not null unique,
        primary key (id)
    );

    create table const_algorithm_accessibilities (
        id integer generated by default as identity,
        description varchar(255),
        name varchar(255) check (name in ('PUBLIC','PRIVATE','SHARED')),
        primary key (id)
    );

    create table const_algorithm_types (
        id integer generated by default as identity,
        name varchar(255) check (name in ('CUSTOM','PREDEFINED')),
        primary key (id)
    );

    create table const_category_request_statuses (
        id integer generated by default as identity,
        description varchar(1000),
        name varchar(255) check (name in ('PENDING','APPROVED','REJECTED')),
        primary key (id)
    );

    create table const_dataset_accessibilities (
        id integer generated by default as identity,
        description varchar(255),
        name varchar(255) check (name in ('PUBLIC','PRIVATE','SHARED')),
        primary key (id)
    );

    create table const_dataset_share_action_types (
        id integer generated by default as identity,
        description varchar(255) not null,
        name varchar(255) not null check (name in ('SHARE','REMOVE','DECLINED')),
        primary key (id)
    );

    create table const_model_accessibilites (
        id integer generated by default as identity,
        description varchar(255) not null,
        name varchar(255) not null check (name in ('PRIVATE','PUBLIC','SHARED')),
        primary key (id)
    );

    create table const_model_exec_statuses (
        id integer generated by default as identity,
        description varchar(1000),
        name varchar(255) check (name in ('REQUESTED','IN_PROGRESS','FINISHED','FAILED','CANCELED')),
        primary key (id)
    );

    create table const_model_share_action_types (
        id integer generated by default as identity,
        description varchar(255) not null,
        name varchar(255) not null check (name in ('SHARE','REVOKE','VIEWED')),
        primary key (id)
    );

    create table const_model_statuses (
        id integer generated by default as identity,
        description varchar(1000),
        name varchar(255) check (name in ('REQUESTED','IN_PROGRESS','FINISHED','FAILED','CANCELED')),
        primary key (id)
    );

    create table const_training_statuses (
        id integer generated by default as identity,
        description varchar(1000),
        name varchar(255) check (name in ('REQUESTED','RUNNING','COMPLETED','FAILED')),
        primary key (id)
    );

    create table const_user_statuses (
        id integer generated by default as identity,
        description varchar(255),
        name varchar(255) check (name in ('ACTIVE','INACTIVE','BANNED')),
        primary key (id)
    );

    create table custom_algorithm_configurations (
        algorithm_id integer,
        id integer generated by default as identity,
        primary key (id)
    );

    create table custom_algorithm_images (
        custom_algorithm_id integer not null,
        id integer generated by default as identity,
        is_active boolean not null,
        uploaded_at timestamp(6) with time zone,
        docker_hub_url varchar(255),
        docker_tar_key varchar(255),
        primary key (id)
    );

    create table custom_algorithm_keywords (
        algorithm_id integer not null,
        keyword varchar(255)
    );

    create table custom_algorithms (
        accessibility_id integer,
        id integer generated by default as identity,
        created_at timestamp(6) not null,
        owner_id uuid not null,
        name varchar(100) not null,
        description varchar(500),
        version varchar(255) not null,
        primary key (id)
    );

    create table dataset_configurations (
        dataset_id integer,
        id integer generated by default as identity,
        upload_date timestamp(6) with time zone,
        basic_attributes_columns varchar(255),
        status varchar(255) check (status in ('DEFAULT','CUSTOM')),
        target_column varchar(255),
        primary key (id)
    );

    create table dataset_copies (
        id integer not null,
        original_dataset_id integer not null,
        copy_date timestamp(6) with time zone,
        copied_by_user_id uuid not null,
        copy_operated_by_user_id uuid not null,
        primary key (id)
    );

    create table dataset_shares (
        dataset_id integer not null,
        id integer not null,
        shared_at timestamp(6) with time zone not null,
        shared_by_user_id uuid not null,
        shared_with_user_id uuid not null,
        comment varchar(255),
        primary key (id),
        unique (dataset_id, shared_with_user_id)
    );

    create table datasets (
        accessibility_id integer not null,
        category_id integer not null,
        id integer not null,
        file_size bigint not null,
        upload_date timestamp(6) with time zone not null,
        user_id uuid not null,
        content_type varchar(255) not null,
        description varchar(255),
        file_name varchar(255) not null unique,
        file_path varchar(255) not null,
        original_file_name varchar(255) not null,
        primary key (id)
    );

    create table dataset_share_history (
        action_type integer,
        dataset_id integer not null,
        id integer not null,
        action_at timestamp(6) with time zone,
        action_by_user_id uuid not null,
        target_user_id uuid not null,
        comment varchar(255),
        primary key (id)
    );

    create table jwt_tokens (
        expired boolean not null,
        revoked boolean not null,
        created_at timestamp(6),
        revoked_at timestamp(6),
        id uuid not null,
        user_id uuid,
        token varchar(1000) not null,
        primary key (id)
    );

    create table keywords (
        id bigint generated by default as identity,
        name varchar(255) not null unique,
        primary key (id)
    );

    create table model_keywords (
        model_id integer not null,
        keyword_id bigint not null,
        primary key (model_id, keyword_id)
    );

    create table model_share_history (
        action integer not null,
        model_id integer not null,
        action_time timestamp(6) with time zone not null,
        id bigint generated by default as identity,
        action_performed_by uuid not null,
        shared_with_user_id uuid not null,
        comment varchar(255),
        primary key (id)
    );

    create table model_shares (
        id integer generated by default as identity,
        model_id integer not null,
        shared_at timestamp(6) with time zone not null,
        shared_by_user_id uuid not null,
        shared_with_user_id uuid not null,
        comment varchar(255),
        primary key (id),
        unique (model_id, shared_with_user_id)
    );

    create table models (
        accessibility_id integer,
        algorithm_type_id integer not null,
        category_id integer not null,
        finalized boolean,
        id integer generated by default as identity,
        status_id integer,
        training_id integer unique,
        finalization_date timestamp(6) with time zone,
        finished_at timestamp(6) with time zone,
        data_description varchar(500),
        model_description varchar(500),
        model_url varchar(1000),
        metrics_url varchar(255),
        model_name varchar(255),
        primary key (id)
    );

    create table models_executions (
        dataset_id integer,
        id integer generated by default as identity,
        model_id integer,
        status_id integer,
        executed_at timestamp(6),
        executed_by_user_id uuid not null,
        prediction_result varchar(5000),
        primary key (id)
    );

    create table roles (
        id integer generated by default as identity,
        description varchar(255),
        name varchar(255) not null unique check (name in ('USER','GROUP_LEADER','GROUP_MEMBER','DATASET_MANAGER','ALGORITHM_MANAGER','CATEGORY_MANAGER','TRAINING_MODEL_MANAGER','ADMIN')),
        primary key (id)
    );

    create table tokens (
        expiry_date timestamp(6) not null,
        id bigint generated by default as identity,
        user_id uuid not null unique,
        token varchar(255) not null unique,
        primary key (id)
    );

    create table trainings (
        algorithm_id integer,
        custom_algorithm_id integer,
        dataset_id integer,
        id integer generated by default as identity,
        status_id integer,
        finished_date timestamp(6) with time zone,
        started_date timestamp(6) with time zone,
        user_id uuid,
        results varchar(3000),
        primary key (id)
    );

    create table user_roles (
        role_id integer not null,
        user_id uuid not null,
        primary key (role_id, user_id)
    );

    create table users (
        age integer,
        status_id integer,
        id uuid not null,
        country varchar(255),
        email varchar(255) unique,
        first_name varchar(255),
        last_name varchar(255),
        password varchar(255),
        profession varchar(255),
        username varchar(255) unique,
        primary key (id)
    );

    alter table if exists algorithm_configurations 
       add constraint FKofioj9ehtxf4wmulr8wdv21ww 
       foreign key (algorithm_id) 
       references algorithms;

    alter table if exists algorithm_configurations 
       add constraint FK1rvn11htb1iomdy24ln9nftkl 
       foreign key (user_id) 
       references users;

    alter table if exists algorithm_parameters 
       add constraint FK43dky8fetw23tgh7p04fwxa06 
       foreign key (algorithm_id) 
       references custom_algorithms;

    alter table if exists algorithm_parameters 
       add constraint FKin3yhrh522gwtw85vgvrsk2td 
       foreign key (configuration_id) 
       references custom_algorithm_configurations;

    alter table if exists categories 
       add constraint FK5yfru0au6kpyqs4tonky5vfne 
       foreign key (created_by) 
       references users;

    alter table if exists category_hierarchy 
       add constraint FKimsja6mjsn8tcyt3yal6wvsq2 
       foreign key (parent_category_id) 
       references categories;

    alter table if exists category_hierarchy 
       add constraint FKmlago2x65rtqbl39nrpshpfyr 
       foreign key (child_category_id) 
       references categories;

    alter table if exists category_history 
       add constraint FKjad8qve35a3xur3ksdqy1s7r6 
       foreign key (category_id) 
       references categories;

    alter table if exists category_history 
       add constraint FK8kpgw912s7ifx94kfofeggmis 
       foreign key (edited_by) 
       references users;

    alter table if exists category_request_parents 
       add constraint FKhw9wrdbcwax68e49jrx6iiyol 
       foreign key (parent_category_id) 
       references categories;

    alter table if exists category_request_parents 
       add constraint FK6011ls9wxc1pjfhr9h5jcq0to 
       foreign key (category_request_id) 
       references category_requests;

    alter table if exists category_requests 
       add constraint FKnuc1qa36reyd9ldapjv6t4a7u 
       foreign key (approved_category_id) 
       references categories;

    alter table if exists category_requests 
       add constraint FKiyrjwg1omp9fitp7yevy5lo0x 
       foreign key (processed_by) 
       references users;

    alter table if exists category_requests 
       add constraint FKf1fu9gf7ln2nr57j3oa2qmjy2 
       foreign key (requested_by) 
       references users;

    alter table if exists category_requests 
       add constraint FK7djjb62j28dnfs1ytax6a41t2 
       foreign key (status_id) 
       references const_category_request_statuses;

    alter table if exists custom_algorithm_configurations 
       add constraint FKpxvajbq3pb2sfffkpvo0a0x1c 
       foreign key (algorithm_id) 
       references custom_algorithms;

    alter table if exists custom_algorithm_images 
       add constraint FKe3hd8kvkboddnmxx7kcut7spo 
       foreign key (custom_algorithm_id) 
       references custom_algorithms;

    alter table if exists custom_algorithm_keywords 
       add constraint FKl1u56b7q22u5nav5175j41n3 
       foreign key (algorithm_id) 
       references custom_algorithms;

    alter table if exists custom_algorithms 
       add constraint FKbf9eblx5qg4xeld88bbwjpcn2 
       foreign key (accessibility_id) 
       references const_algorithm_accessibilities;

    alter table if exists custom_algorithms 
       add constraint FK4m8x2l9iw500o0eyp0gelki8l 
       foreign key (owner_id) 
       references users;

    alter table if exists dataset_configurations 
       add constraint FKdojh9jqc16pvsu097nnuw3bkb 
       foreign key (dataset_id) 
       references datasets;

    alter table if exists dataset_copies 
       add constraint FKenug24cr3g9neiob8dppsk1s2 
       foreign key (copied_by_user_id) 
       references users;

    alter table if exists dataset_copies 
       add constraint FK34ooawiakff5wii1oaw09rjxt 
       foreign key (copy_operated_by_user_id) 
       references users;

    alter table if exists dataset_copies 
       add constraint FK4erpinfyhqnxu4jke5yrw1xb9 
       foreign key (original_dataset_id) 
       references datasets;

    alter table if exists dataset_shares 
       add constraint FK5wfxv8hljm1kdmyhquetwvt0m 
       foreign key (dataset_id) 
       references datasets;

    alter table if exists dataset_shares 
       add constraint FK7fpwpbfw5ljhgu7gsq07earlm 
       foreign key (shared_by_user_id) 
       references users;

    alter table if exists dataset_shares 
       add constraint FK5typug9idjlxs0bdv9aw6s0og 
       foreign key (shared_with_user_id) 
       references users;

    alter table if exists datasets 
       add constraint FKb0hv5u9clhn3jdwm96iudx0ys 
       foreign key (accessibility_id) 
       references const_dataset_accessibilities;

    alter table if exists datasets 
       add constraint FKkdh1nsjr9lyhip4ugqvv1wa1t 
       foreign key (category_id) 
       references categories;

    alter table if exists datasets 
       add constraint FKrjok8vjwilkpvcms30qxy9u4 
       foreign key (user_id) 
       references users;

    alter table if exists dataset_share_history 
       add constraint FKqar415gmkwdq0mgc5whd8jfd9 
       foreign key (action_by_user_id) 
       references users;

    alter table if exists dataset_share_history 
       add constraint FKoc2bacw0n3axmcpsq8179rmo4 
       foreign key (action_type) 
       references const_dataset_share_action_types;

    alter table if exists dataset_share_history 
       add constraint FKadv06o24ld454hveodjn61kg2 
       foreign key (dataset_id) 
       references datasets;

    alter table if exists dataset_share_history 
       add constraint FKs8tr00k8dxfhr20hk1v08yeh 
       foreign key (target_user_id) 
       references users;

    alter table if exists jwt_tokens 
       add constraint FKhy6n4wirmw0ryw2wdmy9cx2mn 
       foreign key (user_id) 
       references users;

    alter table if exists model_keywords 
       add constraint FK4ortgjbwe9ky4iqufpr33jg17 
       foreign key (keyword_id) 
       references keywords;

    alter table if exists model_keywords 
       add constraint FKfhvjgynndfc5iv1u0g9dhemcf 
       foreign key (model_id) 
       references models;

    alter table if exists model_share_history 
       add constraint FKwihpuvecgj729b6ksl8d0nso 
       foreign key (action) 
       references const_model_share_action_types;

    alter table if exists model_share_history 
       add constraint FK7p8bg3e3rfi2wk6ucdtkrmu0j 
       foreign key (model_id) 
       references models;

    alter table if exists model_share_history 
       add constraint FKsvn25o057th3l3m9nfxr2vbvq 
       foreign key (action_performed_by) 
       references users;

    alter table if exists model_share_history 
       add constraint FKiec9syty1qsndg7xehm9flhsw 
       foreign key (shared_with_user_id) 
       references users;

    alter table if exists model_shares 
       add constraint FK3dad3uc58gdkqrlqgman36bqi 
       foreign key (model_id) 
       references models;

    alter table if exists model_shares 
       add constraint FKc8sxgyw4luu346lhfx79n4ms2 
       foreign key (shared_by_user_id) 
       references users;

    alter table if exists model_shares 
       add constraint FK80wvskpfreunsp9a871dw7mb0 
       foreign key (shared_with_user_id) 
       references users;

    alter table if exists models 
       add constraint FKiajvviab6hnqxuslymt301w7a 
       foreign key (accessibility_id) 
       references const_model_accessibilites;

    alter table if exists models 
       add constraint FKhhxsrjq82lspx2jefuv5ocpi0 
       foreign key (algorithm_type_id) 
       references const_algorithm_types;

    alter table if exists models 
       add constraint FKqfg4fsesyatglbxwhjhnhbsjw 
       foreign key (category_id) 
       references categories;

    alter table if exists models 
       add constraint FK7el59nhidfco04xy3l7ny0j2x 
       foreign key (status_id) 
       references const_model_statuses;

    alter table if exists models 
       add constraint FKce22cnw5faanyl8bp4xxx4nf 
       foreign key (training_id) 
       references trainings;

    alter table if exists models_executions 
       add constraint FK8qc7mbojl6ckocx6uf0eufnpf 
       foreign key (dataset_id) 
       references datasets;

    alter table if exists models_executions 
       add constraint FKm01nkwk75cq8ylhnccntv4ry8 
       foreign key (executed_by_user_id) 
       references users;

    alter table if exists models_executions 
       add constraint FKm6jiw0xyuow5ye9k3cj54bil0 
       foreign key (model_id) 
       references models;

    alter table if exists models_executions 
       add constraint FKrkkydwsrppyuy9juld528qhr0 
       foreign key (status_id) 
       references const_model_exec_statuses;

    alter table if exists tokens 
       add constraint FK2dylsfo39lgjyqml2tbe0b0ss 
       foreign key (user_id) 
       references users;

    alter table if exists trainings 
       add constraint FKik1dhw417vhoa52oi89pe235d 
       foreign key (algorithm_id) 
       references algorithm_configurations;

    alter table if exists trainings 
       add constraint FKs658hhhvp2ii59fqvu61pxrpd 
       foreign key (custom_algorithm_id) 
       references custom_algorithm_configurations;

    alter table if exists trainings 
       add constraint FKsb32712jy23c77po3798414gf 
       foreign key (dataset_id) 
       references dataset_configurations;

    alter table if exists trainings 
       add constraint FKbau7snctxes6ttti1q05n6x3a 
       foreign key (status_id) 
       references const_training_statuses;

    alter table if exists trainings 
       add constraint FK32ir33u28fo97252hksjvlubp 
       foreign key (user_id) 
       references users;

    alter table if exists user_roles 
       add constraint FKh8ciramu9cc9q3qcqiv4ue8a6 
       foreign key (role_id) 
       references roles;

    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users;

    alter table if exists users 
       add constraint FKgxtxqk04aqgbn1wkwp10lvtje 
       foreign key (status_id) 
       references const_user_statuses;
